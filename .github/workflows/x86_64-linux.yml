name: x86_64-linux

on:
  workflow_dispatch:


jobs:
  build:
    name: ${{ matrix.name }}

    env:
      MAKEJOBS: "-j20"
      CHECK_DOC: "0"
      CCACHE_SIZE: "100M"
      CCACHE_TEMPDIR: /tmp/.ccache-temp
      CCACHE_COMPRESS: "1"
      PYTHON_DEBUG: "1"
      WINEDEBUG: fixme-all
      SDK_URL: https://bitcoincore.org/depends-sources/sdks
      VERSION: "1.1.7"
      RELEASE_NAME: "$GITHUB_WORKFLOW"
      RELEASE_TAG: "1.1.7"

    strategy:
      fail-fast: false
      matrix:
        name:
          - x86_64-linux

        include:
          - name: x86_64-linux
            host: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            packages: bc python3-zmq
            run-tests: false
            dep-opts: ""
            config-opts: "--enable-gui=qt5 --enable-zmq --enable-glibc-back-compat --enable-reduce-exports"
            goal: install
            strip-cmd: "strip"

    runs-on: self-hosted

    steps:
      - name: Add architecture
        if: ${{ matrix.arch }}
        run: |
          sudo dpkg --add-architecture "${{ matrix.arch }}"
  
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps bison
          sudo apt-get install ${{ matrix.packages }}

      - name: Post install
        if: ${{ matrix.postinstall }}
        run: ${{ matrix.postinstall }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache SDK
        uses: actions/cache@v4
        with:
          path: depends/sdk-sources
          key: sdk-${{ runner.os }}-${{ matrix.name }}
          restore-keys: sdk-${{ runner.os }}-
          save-always: true

      - name: Install SDK
        if: ${{ matrix.sdk }}
        run: |
          mkdir -p depends/sdk-sources
          mkdir -p depends/SDKs
          curl --location --fail $SDK_URL/MacOSX${{ matrix.sdk }}.sdk.tar.gz -o depends/sdk-sources/MacOSX${{ matrix.sdk }}.sdk.tar.gz
          tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${{ matrix.sdk }}.sdk.tar.gz

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: depends/built
          key: dependencies-${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('depends/packages/*') }}
          restore-keys: dependencies-${{ runner.os }}-${{ matrix.name }}-
          save-always: true

      - name: Build depends
        id: Build_Depends
        run: |
          make -C depends HOST=${{ matrix.host }} ${{ env.MAKEJOBS }} ${{ matrix.dep-opts }}
        continue-on-error: true
      
      - name: CCache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('**/configure.ac') }}
          restore-keys: ccache-${{ runner.os }}-${{ matrix.name }}-

      - name: Build Pulsar Core
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/${{ matrix.host }} ${{ matrix.config-opts }} || ( cat config.log && false)
          make ${{ env.MAKEJOBS }} ${{ matrix.goal }} || ( echo "Build failure. Verbose build follows." && make ${{ matrix.goal }} V=1 ; false )

          
      - name: Strip built binaries
        run: |
          ${{ matrix.strip-cmd }} depends/${{ matrix.host }}/bin/pulsard* src/qt/pulsar-qt* src/pulsar-cli* src/pulsar-tx* dist/Pulsar-Qt.app* || ( echo "Failed stripping builds. The build will have a bigger file size" )
          
      - name: Move to release
        run: |
          mkdir release
          cp depends/${{ matrix.host }}/bin/pulsard* release/
          cp src/qt/pulsar-qt* release/
          cp src/pulsar-cli* release/
          cp src/pulsar-tx* release/
        continue-on-error: true
      
      - name: Chmod & Tar
        run: |
          chmod -R +x release/
          tar -cvf Pulsar-${{ env.VERSION }}-${{ matrix.name }}.tar -C release/ .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Pulsar-${{ env.VERSION }}-${{ matrix.name }}
          path: |
            Pulsar-${{ env.VERSION }}-${{ matrix.name }}.tar            
      
#TESTING

      - name: Set enviroment for github-release
        run: |
          - name: Save state
          run: echo "RELEASE_TAG=${{ env.VERSION }}" >> $GITHUB_STATE

          - name: Set output
          run: echo "RELEASE_NAME={$GITHUB_WORKFLOW}" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: >
            testing.....  
          gzip: false
          files: >
            release-v1.0.0-windows:release/Pulsar-${{ env.VERSION }}-${{ matrix.name }}
        continue-on-error: true
